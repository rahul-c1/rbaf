[{"name":"app.r","content":"library(shiny)\n\nui <- navbarPage(\"Risk Tool\",\n                 \n                 tabPanel(\"Risk Calculator\",\n                          fluidPage(\n                            titlePanel(\"$ Risk Calculator\"),\n                            sidebarLayout(\n                              sidebarPanel(\n                                textInput(\"symbol\", \"Symbol:\", value = \"XYZQ\"),\n                                numericInput(\"portfolio_size\", \"Portfolio Size $:\", value = 100000, min = 1),\n                                numericInput(\"share_price\", \"Share Price:\", value = 100, min = 0.01),\n                                numericInput(\"stop_price\", \"Stop Price (must be < share price):\", value = 95, min = 0.01),\n                                numericInput(\"risk_amount\", \"$ Amount to Risk:\", value = 1000, min = 1),\n                                actionButton(\"calculate\", \"Calculate\"),\n                                actionButton(\"clear\", \"Clear\")\n                              ),\n                              mainPanel(\n                                verbatimTextOutput(\"summary\"),\n                                tableOutput(\"risk_reward_table\")\n                              )\n                            )\n                          )\n                 ),\n                 \n                 tabPanel(\"Kelly Criterion\",\n                          fluidPage(\n                            titlePanel(\"Kelly Criterion\"),\n                            sidebarLayout(\n                              sidebarPanel(\n                                numericInput(\"winRate\", \"Win Rate (%):\", value = 50),\n                                numericInput(\"avgWin\", \"Average Win ($):\", value = 100),\n                                numericInput(\"avgLoss\", \"Average Loss ($):\", value = 100),\n                                actionButton(\"calculateKelly\", \"Calculate\")\n                              ),\n                              mainPanel(\n                                verbatimTextOutput(\"kellyResults\")\n                              )\n                            )\n                          )\n                 ),\n                 \n                 tabPanel(\"RBAF Analysis\",\n                          fluidPage(\n                            titlePanel(\"RBAF Analysis\"),\n                            sidebarLayout(\n                              sidebarPanel(\n                                numericInput(\"initialBalance\", \"Initial Balance:\", value = 100000),\n                                numericInput(\"riskPerTrade\", \"Risk Per Trade (%):\", value = 2),\n                                numericInput(\"targetRR\", \"Target Risk/Reward:\", value = 2),\n                                numericInput(\"winRateRBAF\", \"Win Rate (%):\", value = 50),\n                                numericInput(\"numSimulations\", \"Number of Simulations:\", value = 1000),\n                                numericInput(\"numTrades\", \"Number of Trades:\", value = 100),\n                                actionButton(\"runRBAF\", \"Run Simulation\")\n                              ),\n                              mainPanel(\n                                verbatimTextOutput(\"rbafStats\")\n                              )\n                            )\n                          )\n                 )\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$calculate, {\n    req(input$share_price > input$stop_price)\n    \n    stop_amount <- abs(input$share_price - input$stop_price)\n    shares_to_buy <- floor(input$risk_amount / stop_amount)\n    \n    if (shares_to_buy <= 0) {\n      output$summary <- renderText(\"Risk amount too small to buy even 1 share.\")\n      output$risk_reward_table <- renderTable(NULL)\n      return()\n    }\n    \n    position_amount <- shares_to_buy * input$share_price\n    pos_pct <- position_amount / input$portfolio_size * 100\n    risk_pct <- input$risk_amount / input$portfolio_size * 100\n    \n    output$summary <- renderText({\n      paste(\n        \"Stop Amount: $\", round(stop_amount, 2),\n        \"\\nShares to Buy:\", shares_to_buy,\n        \"\\nPosition Amount: $\", round(position_amount, 2),\n        \"\\nPosition Size %:\", round(pos_pct, 2), \"%\",\n        \"\\nRisk as % of Equity:\", round(risk_pct, 2), \"%\"\n      )\n    })\n    \n    risk_multiples <- 1:6\n    risk_amounts <- input$risk_amount * risk_multiples\n    upside_targets <- input$share_price + (risk_amounts / shares_to_buy)\n    gains_pct <- (upside_targets - input$share_price) / input$share_price * 100\n    \n    risk_table <- data.frame(\n      `R Multiplier` = paste0(risk_multiples, \"R\"),\n      `Target Price ($)` = round(upside_targets, 2),\n      `Gain %` = round(gains_pct, 2),\n      check.names = FALSE\n    )\n    \n    output$risk_reward_table <- renderTable(risk_table)\n  })\n  \n  observeEvent(input$clear, {\n    updateTextInput(session, \"symbol\", value = \"\")\n    updateNumericInput(session, \"portfolio_size\", value = NA)\n    updateNumericInput(session, \"share_price\", value = NA)\n    updateNumericInput(session, \"stop_price\", value = NA)\n    updateNumericInput(session, \"risk_amount\", value = NA)\n    output$summary <- renderText(\"\")\n    output$risk_reward_table <- renderTable(NULL)\n  })\n  \n  observeEvent(input$calculateKelly, {\n    p <- input$winRate / 100\n    q <- 1 - p\n    b <- input$avgWin / input$avgLoss\n    kelly <- (b * p - q) / b\n\n    output$kellyResults <- renderText({\n      paste(\n        \"Optimal Kelly Fraction: \", round(kelly * 100, 2), \"%\",\n        \"\\nHalf Kelly: \", round(kelly * 50, 2), \"%\",\n        \"\\nQuarter Kelly: \", round(kelly * 25, 2), \"%\"\n      )\n    })\n  })\n\n  observeEvent(input$runRBAF, {\n    results <- replicate(input$numSimulations, {\n      balance <- input$initialBalance\n      for (i in 1:input$numTrades) {\n        risk <- balance * input$riskPerTrade / 100\n        win <- runif(1) < input$winRateRBAF / 100\n        balance <- balance + if (win) risk * input$targetRR else -risk\n      }\n      balance\n    })\n\n    output$rbafStats <- renderText({\n      paste(\n        \"Median Final Balance: $\", round(median(results), 2),\n        \"\\n25th Percentile: $\", round(quantile(results, 0.25), 2),\n        \"\\n75th Percentile: $\", round(quantile(results, 0.75), 2),\n        \"\\nProbability of Profit: \", round(mean(results > input$initialBalance) * 100, 2), \"%\"\n      )\n    })\n  })\n}\n\nshinyApp(ui, server)\n","type":"text"}]
